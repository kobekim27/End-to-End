Traceback (most recent call last):
  File "C:\Users\pogoz\AppData\Local\Programs\Python\Python310\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\pogoz\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\pogoz\AppData\Local\Programs\Python\Python310\lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "C:\Users\pogoz\AppData\Local\Programs\Python\Python310\lib\asyncio\base_events.py", line 641, in run_until_complete
    return future.result()
  File "C:\Users\pogoz\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\pogoz\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\pogoz\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import csv
import sqlite3
import pandas as pd

# Step 1: Load and parse the CSV file
file_path = 'adult-all.csv' #https://github.com/jbrownlee/Datasets/blob/master/adult-all.csv
data = []
columns = ['age', 'workclass', 'fnlwgt', 'education', 'education-num', 'marital-status', 
           'occupation', 'relationship', 'race', 'sex', 'capital-gain', 'capital-loss', 
           'hours-per-week', 'native-country', 'income']

with open(file_path, mode='r') as file:
    csv_reader = csv.reader(file)
    for row in csv_reader:
        data.append(dict(zip(columns, row)))

# Step 2: Create a normalized database
conn = sqlite3.connect(':memory:')
cursor = conn.cursor()

# Create tables for categorical data
cursor.execute('''CREATE TABLE workclass (id INTEGER PRIMARY KEY, workclass TEXT UNIQUE)''')
cursor.execute('''CREATE TABLE education (id INTEGER PRIMARY KEY, education TEXT UNIQUE)''')
cursor.execute('''CREATE TABLE marital_status (id INTEGER PRIMARY KEY, marital_status TEXT UNIQUE)''')
cursor.execute('''CREATE TABLE occupation (id INTEGER PRIMARY KEY, occupation TEXT UNIQUE)''')
cursor.execute('''CREATE TABLE relationship (id INTEGER PRIMARY KEY, relationship TEXT UNIQUE)''')
cursor.execute('''CREATE TABLE race (id INTEGER PRIMARY KEY, race TEXT UNIQUE)''')
cursor.execute('''CREATE TABLE sex (id INTEGER PRIMARY KEY, sex TEXT UNIQUE)''')
cursor.execute('''CREATE TABLE native_country (id INTEGER PRIMARY KEY, native_country TEXT UNIQUE)''')

# Create main table
cursor.execute('''CREATE TABLE adult_data 
               (id INTEGER PRIMARY KEY, 
               age INTEGER, 
               workclass_id INTEGER,
               fnlwgt INTEGER,
               education_id INTEGER,
               education_num INTEGER,
               marital_status_id INTEGER,
               occupation_id INTEGER,
               relationship_id INTEGER,
               race_id INTEGER,
               sex_id INTEGER,
               capital_gain INTEGER,
               capital_loss INTEGER,
               hours_per_week INTEGER,
               native_country_id INTEGER,
               income TEXT)''')

# Insert data into tables
for row in data:
    cursor.execute("INSERT OR IGNORE INTO workclass (workclass) VALUES (?)", (row['workclass'],))
    cursor.execute("INSERT OR IGNORE INTO education (education) VALUES (?)", (row['education'],))
    cursor.execute("INSERT OR IGNORE INTO marital_status (marital_status) VALUES (?)", (row['marital-status'],))
    cursor.execute("INSERT OR IGNORE INTO occupation (occupation) VALUES (?)", (row['occupation'],))
    cursor.execute("INSERT OR IGNORE INTO relationship (relationship) VALUES (?)", (row['relationship'],))
    cursor.execute("INSERT OR IGNORE INTO race (race) VALUES (?)", (row['race'],))
    cursor.execute("INSERT OR IGNORE INTO sex (sex) VALUES (?)", (row['sex'],))
    cursor.execute("INSERT OR IGNORE INTO native_country (native_country) VALUES (?)", (row['native-country'],))
    
    cursor.execute('''INSERT INTO adult_data 
                   (age, workclass_id, fnlwgt, education_id, education_num, marital_status_id,
                   occupation_id, relationship_id, race_id, sex_id, capital_gain, capital_loss,
                   hours_per_week, native_country_id, income)
                   VALUES 
                   (?, (SELECT id FROM workclass WHERE workclass = ?),
                   ?, (SELECT id FROM education WHERE education = ?),
                   ?, (SELECT id FROM marital_status WHERE marital_status = ?),
                   (SELECT id FROM occupation WHERE occupation = ?),
                   (SELECT id FROM relationship WHERE relationship = ?),
                   (SELECT id FROM race WHERE race = ?),
                   (SELECT id FROM sex WHERE sex = ?),
                   ?, ?, ?, (SELECT id FROM native_country WHERE native_country = ?), ?)''',
                   (row['age'], row['workclass'], row['fnlwgt'], row['education'], row['education-num'],
                    row['marital-status'], row['occupation'], row['relationship'], row['race'],
                    row['sex'], row['capital-gain'], row['capital-loss'], row['hours-per-week'],
                    row['native-country'], row['income']))

conn.commit()

# Step 3: Write an SQL query with joins to reconstruct the data
query = '''
SELECT ad.age, w.workclass, ad.fnlwgt, e.education, ad.education_num, 
       ms.marital_status, o.occupation, r.relationship, rc.race, s.sex, 
       ad.capital_gain, ad.capital_loss, ad.hours_per_week, nc.native_country, ad.income
FROM adult_data ad
JOIN workclass w ON ad.workclass_id = w.id
JOIN education e ON ad.education_id = e.id
JOIN marital_status ms ON ad.marital_status_id = ms.id
JOIN occupation o ON ad.occupation_id = o.id
JOIN relationship r ON ad.relationship_id = r.id
JOIN race rc ON ad.race_id = rc.id
JOIN sex s ON ad.sex_id = s.id
JOIN native_country nc ON ad.native_country_id = nc.id
'''

# Load the result into a Pandas DataFrame
data = pd.read_sql_query(query, conn)

# Display the first five of the DataFrame
print(data.head())

# Close the database connection
conn.close()
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [1;32mIn[1], line 12[0m
[0;32m      7[0m data [38;5;241m=[39m []
[0;32m      8[0m columns [38;5;241m=[39m [[38;5;124m'[39m[38;5;124mage[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mworkclass[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mfnlwgt[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124meducation[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124meducation-num[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mmarital-status[39m[38;5;124m'[39m, 
[0;32m      9[0m            [38;5;124m'[39m[38;5;124moccupation[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mrelationship[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mrace[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124msex[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mcapital-gain[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mcapital-loss[39m[38;5;124m'[39m, 
[0;32m     10[0m            [38;5;124m'[39m[38;5;124mhours-per-week[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mnative-country[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mincome[39m[38;5;124m'[39m]
[1;32m---> 12[0m [38;5;28;01mwith[39;00m [38;5;28;43mopen[39;49m[43m([49m[43mfile_path[49m[43m,[49m[43m [49m[43mmode[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mr[39;49m[38;5;124;43m'[39;49m[43m)[49m [38;5;28;01mas[39;00m file:
[0;32m     13[0m     csv_reader [38;5;241m=[39m csv[38;5;241m.[39mreader(file)
[0;32m     14[0m     [38;5;28;01mfor[39;00m row [38;5;129;01min[39;00m csv_reader:

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\IPython\core\interactiveshell.py:324[0m, in [0;36m_modified_open[1;34m(file, *args, **kwargs)[0m
[0;32m    317[0m [38;5;28;01mif[39;00m file [38;5;129;01min[39;00m {[38;5;241m0[39m, [38;5;241m1[39m, [38;5;241m2[39m}:
[0;32m    318[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[0;32m    319[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mIPython won[39m[38;5;124m'[39m[38;5;124mt let you open fd=[39m[38;5;132;01m{[39;00mfile[38;5;132;01m}[39;00m[38;5;124m by default [39m[38;5;124m"[39m
[0;32m    320[0m         [38;5;124m"[39m[38;5;124mas it is likely to crash IPython. If you know what you are doing, [39m[38;5;124m"[39m
[0;32m    321[0m         [38;5;124m"[39m[38;5;124myou can use builtins[39m[38;5;124m'[39m[38;5;124m open.[39m[38;5;124m"[39m
[0;32m    322[0m     )
[1;32m--> 324[0m [38;5;28;01mreturn[39;00m io_open(file, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)

[1;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'adult-all.csv'

